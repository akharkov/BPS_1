let fDescript;_4b8‍.w("./server.js",[["fDescript",["fDescript"],function(v){fDescript=v}]]);

const fs = require('fs');
const path = require('path');
const fileMatch = require('file-match');


const { constants } = require('perf_hooks');




console.log(`fDescript=== ${fDescript}`);
_4b8‍.g.console.log(module.exports);

let filteredFiles = [];
let unFilteredFiles = [];
let filesList;
let sss=[];


exports.curFilePars = async function curFilePars(pathIN, fileMask, pathOut){
  const filter =  fileMatch(fileMask);


  fs.readdir(pathIN, async function(err, files){

    if(err){console.log(`Errorochka ${err}`)}
    else{
        filesList =  await files.filter(function(e){
            return path.extname(e).toLowerCase() === '.dat'
        })

            for (var i=0;i<filesList.length;i++) {
                if (filter(filesList[i])) {filteredFiles.push(filesList[i])}
                else{unFilteredFiles.push(filesList[i])};
            };

            for(var j=0;j<filteredFiles.length;j++){
              console.log(`Перемещаем файл ${filteredFiles[j]} из ${pathIN} в ${pathOut}`);
              
               //const content = await  fileParser(pathIN, pathOut, filteredFiles, j);
               readFile2(pathIN, pathOut, filteredFiles, j  ) ;
               

              

            };
    };
  });




};



async function fileParser(path_IN, path_Out, filtered_Files, y){
  /* console.log(`y==${y}`);
  console.log(`filteredFiles= ${filtered_Files}`);
  console.log(`filteredFiles[${y}]= ${filtered_Files[y]}`); */

  fs.rename(`${path_IN}/${filteredFiles[y]}`,`${path_Out}/${filtered_Files[y]}`, async (err) => {
    
    if(err) {`Файл ${filteredFiles[y]} из ${path_IN} в ${path_Out} не перемещен`}                 // не удалось переместить файл
    else{
      console.log(`Файл ${filtered_Files[y]} из ${path_IN} в ${path_Out} перемещен`);
      console.log(`чтениe файла ${y} ${filtered_Files[y]} `);

      try {
        //const content = await fs.readFileSync(`${path_Out}/${filtered_Files[y]}`, 'utf8');
        //console.log(content);
        //return  fs.readFileSync(`${path_Out}/${filtered_Files[y]}`, 'utf8');
        const cont = await readFile(`${path_Out}/${filtered_Files[y]}`);
        console.log(`cont =====  ${cont}`);
        
        return cont;



      }
      catch (e) {
        console.log(`Ошибка чтения файла ${y} ${filtered_Files[y]} : ${e}`);
        //вернуть во входящие


      }
    }
  });

}


//await readFile("path/to/file");
async function readFile2(path_IN, path_Out, filtered_Files, y, callback) {

  
  fs.rename(`${path_IN}/${filteredFiles[y]}`,`${path_Out}/${filtered_Files[y]}`, (err) => {
    if(err) {`Файл ${filteredFiles[y]} из ${path_IN} в ${path_Out} не перемещен`}                 // не удалось переместить файл
    else{

      const fpath = path.resolve(`${path_Out}/${filtered_Files[y]}`);
      console.log(`fpath == ${fpath}`);

      let fContent =     new Promise((resolve, reject) => {
        fs.readFile(fpath, 'utf8', function (err, data) {
          if (err) {
            console.log(`Error on function readFile2  File ${filtered_Files[y]}`);
            reject(err);
          } else {
            resolve(data);
          };
        });
        


        
      });
      fContent.then(content=>{
        //console.log(` ===== File ${filtered_Files[y]} content  ${content}`);
        console.log(`fDescript.descriptBN = ${module.exports.fDescript.descriptBN.structureData[3]}`);
      });
    };

  });

  
  
}

//await readFile("path/to/file");
async function readFile(path) {
  

  return new Promise((resolve, reject) => {
    fs.readFile(path, 'utf8', function (err, data) {
      if (err) {
        reject(err);
      }
      resolve(data);
    });
  });
}